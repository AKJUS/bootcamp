/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.Arrays;
import java.util.Map;

import ai.onnxruntime.*;
// import ai.onnxruntime.extensions.*;
import ai.onnxruntime.extensions.*;

@SuppressWarnings("unused")
public class App {
    public String getGreeting() {
        return "Hello World 2!";
    }

    public static void main(String[] args) {
        var env = OrtEnvironment.getEnvironment();

        try {
            var sess_opt = new OrtSession.SessionOptions();
            // sess_opt.registerCustomOpLibrary(OrtxPackage.getLibraryPath());
            System.out.println(System.getProperty("user.dir"));

            // var tokenizer = env.createSession("app/tokenizer.onnx", new
            // OrtSession.SessionOptions());

            // var inputName = tokenizer.getInputNames().iterator().next();
            // var outputName = tokenizer.getOutputNames().iterator().next();

            // System.out.println(inputName);
            // System.out.println(outputName);

            var session = env.createSession("app/model.onnx", sess_opt);

            // Get input and output names

            var inputName = session.getInputNames().iterator().next();
            var outputName = session.getOutputNames().iterator().next();

            // System.out.println(inputName);
            // System.out.println(outputName);

            long[][] tokens = { { 101, 1996, 4248, 2829, 4419, 14523, 2058, 1996, 13971, 3899, 1012, 102 } };
            long[][] masks = { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } };
            long[][] token_type_ids = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };

            var test_tokens = OnnxTensor.createTensor(env, tokens);
            var test_mask = OnnxTensor.createTensor(env, masks);
            var test_token_type_ids = OnnxTensor.createTensor(env, token_type_ids);

            var inputs = Map.of("input_ids", test_tokens, "attention_mask", test_mask, "token_type_ids",
                    test_token_type_ids);
            var results = session.run(inputs).get("embeddings");

            // System.out.println("type");
            // System.out.println(results.get().getType());

            // float[][][] embeddings = (float[][][]) results.get().getValue();
            float[][] embeddings = (float[][]) results.get().getValue();

            var result = Arrays.toString(Arrays.copyOfRange(embeddings[0], 0, 16));
            System.out.println(result);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}

// 0.146325, 0.32853213, 0.266175, 0.5182375, 0.20214303, -0.17958449,
// 0.15232176, -0.39807054, -0.037162323, -0.057262924, 0.12987728, 0.13251846